Index: .idea/jarRepositories.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/jarRepositories.xml b/.idea/jarRepositories.xml
new file mode 100644
--- /dev/null	(date 1646662137259)
+++ b/.idea/jarRepositories.xml	(date 1646662137259)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RemoteRepositoriesConfiguration">
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Maven Central repository" />
+      <option name="url" value="https://repo1.maven.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="jboss.community" />
+      <option name="name" value="JBoss Community repository" />
+      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="MavenRepo" />
+      <option name="name" value="MavenRepo" />
+      <option name="url" value="https://repo.maven.apache.org/maven2/" />
+    </remote-repository>
+  </component>
+</project>
\ No newline at end of file
Index: src/main/java/hello/springmvc/basic/request/RequestBodyStringController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/hello/springmvc/basic/request/RequestBodyStringController.java b/src/main/java/hello/springmvc/basic/request/RequestBodyStringController.java
new file mode 100644
--- /dev/null	(date 1646662137283)
+++ b/src/main/java/hello/springmvc/basic/request/RequestBodyStringController.java	(date 1646662137283)
@@ -0,0 +1,66 @@
+package hello.springmvc.basic.request;
+
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.http.HttpEntity;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.stereotype.Controller;
+import org.springframework.util.StreamUtils;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestBody;
+
+import javax.servlet.ServletInputStream;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.Writer;
+import java.nio.charset.StandardCharsets;
+
+//에러 https://zzznara2.tistory.com/422
+@Slf4j
+@Controller
+public class RequestBodyStringController {
+
+    @PostMapping("/request-body-string-v1")
+    public void requestBodyString(HttpServletRequest request , HttpServletResponse response) throws IOException {
+        ServletInputStream inputStream = request.getInputStream();
+        String messageBody = StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8);
+
+        log.info("messageBody={}" , messageBody);
+
+        response.getWriter().write("ok");
+    }
+
+    @PostMapping("/request-body-string-v2")
+    public void requestBodyStringV2(InputStream inputStream, Writer responseWriter) throws IOException {
+        String messageBody = StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8);
+        log.info("messageBody={}" , messageBody);
+
+        responseWriter.write("ok");
+    }
+
+    @PostMapping("/request-body-string-v3")
+    public HttpEntity<String> requestBodyStringV3(HttpEntity<String> httpEntity) throws IOException {
+        String messageBody = httpEntity.getBody();
+        log.info("messageBody={}" , messageBody);
+
+        return new HttpEntity<>("Ok");
+    }
+
+    @PostMapping("/request-body-string-v3-1")
+    public HttpEntity<String> requestBodyStringV3_1(ResponseEntity<String> httpEntity) throws IOException {
+        String messageBody = httpEntity.getBody();
+        log.info("messageBody={}" , messageBody);
+
+        return new ResponseEntity<String>("Ok", HttpStatus.CREATED);
+    }
+
+    @PostMapping("/request-body-string-v4")
+    public String requestBodyStringV4(@RequestBody String messageBody) throws IOException {
+
+        log.info("messageBody={}" , messageBody);
+
+        return "Ok";
+    }
+}
Index: src/main/resources/static/basic/hello-form.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/static/basic/hello-form.html b/src/main/resources/static/basic/hello-form.html
new file mode 100644
--- /dev/null	(date 1646662137278)
+++ b/src/main/resources/static/basic/hello-form.html	(date 1646662137278)
@@ -0,0 +1,15 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <title>Title</title>
+</head>
+<body>
+    <form action="/request-param-v1" method="post">
+        username: <input type="text" name="userName" />
+        age: <input type="text" name="age" />
+        <button type="submit">전송</button>
+    </form>
+
+</body>
+</html>
\ No newline at end of file
Index: src/test/test.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/test.iml b/src/test/test.iml
new file mode 100644
--- /dev/null	(date 1646662137293)
+++ b/src/test/test.iml	(date 1646662137293)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/java" isTestSource="true" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: src/main/main.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/main.iml b/src/main/main.iml
new file mode 100644
--- /dev/null	(date 1646662137288)
+++ b/src/main/main.iml	(date 1646662137288)
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/java" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$MAVEN_REPOSITORY$/org/projectlombok/lombok/1.18.16/lombok-1.18.16.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
+    <orderEntry type="library" name="Gradle: org.springframework:spring-web:5.3.16" level="project" />
+    <orderEntry type="library" name="Gradle: org.junit.platform:junit-platform-commons:1.8.2" level="project" />
+    <orderEntry type="library" name="Gradle: org.slf4j:slf4j-api:1.7.36" level="project" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1646662143389)
+++ b/.idea/modules.xml	(date 1646662143389)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/src/main/main.iml" filepath="$PROJECT_DIR$/src/main/main.iml" />
+      <module fileurl="file://$PROJECT_DIR$/src/test/test.iml" filepath="$PROJECT_DIR$/src/test/test.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/spring-mvc-basic.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/spring-mvc-basic.iml b/.idea/spring-mvc-basic.iml
new file mode 100644
--- /dev/null	(date 1646662153642)
+++ b/.idea/spring-mvc-basic.iml	(date 1646662153642)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module external.linked.project.id="spring-mvc-basic" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$" external.system.id="GRADLE" type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: src/main/java/hello/springmvc/basic/request/RequestParamController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/hello/springmvc/basic/request/RequestParamController.java b/src/main/java/hello/springmvc/basic/request/RequestParamController.java
new file mode 100644
--- /dev/null	(date 1646662137225)
+++ b/src/main/java/hello/springmvc/basic/request/RequestParamController.java	(date 1646662137225)
@@ -0,0 +1,94 @@
+package hello.springmvc.basic.request;
+
+import hello.springmvc.basic.HelloData;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.stereotype.Controller;
+import org.springframework.web.bind.annotation.*;
+
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+import java.util.Map;
+
+@Slf4j
+@Controller
+public class RequestParamController {
+
+    @RequestMapping("/request-param-v1")
+    public void requestParamV1(HttpServletRequest request , HttpServletResponse response) throws IOException {
+        String userName = request.getParameter("userName");
+        int age = Integer.parseInt(request.getParameter("age"));
+
+        log.info("userName={} , age={}", userName , age);
+
+        response.getWriter().write("OK");
+    }
+
+
+    @ResponseBody
+    @RequestMapping("/request-param-v2")
+    public String requestParamV2(@RequestParam("userName") String userName ,
+                                 @RequestParam("age") int memberAge) {
+
+        log.info("userName={} , aage={}", userName , memberAge);
+        return "ok";
+    }
+
+    @ResponseBody
+    @RequestMapping("/request-param-v3")
+    public String requestParamV3(@RequestParam String userName ,
+                                 @RequestParam int age) {
+        log.info("userName={} , age={}", userName , age);
+        return "ok";
+    }
+
+    @ResponseBody
+    @RequestMapping("/request-param-v4")
+    public String requestParamV4(String userName , int age) {
+
+        log.info("userName={} , age={}", userName , age);
+        return "ok";
+    }
+
+
+    @ResponseBody
+    @RequestMapping("/request-param-required")
+    public String requestParamRequired(@RequestParam(required = true) String userName ,
+                                       @RequestParam(required = false) Integer age) {
+
+        log.info("userName={} , age={}", userName , age);
+        return "ok";
+    }
+
+    @ResponseBody
+    @RequestMapping("/request-param-default")
+    public String requestParamDefault(@RequestParam(defaultValue = "guest") String userName ,
+                                       @RequestParam(defaultValue = "-1") int age) {
+
+        log.info("userName={} , age={}", userName , age);
+        return "ok";
+    }
+
+    @ResponseBody
+    @RequestMapping("/request-param-map")
+    public String requestParamMap(@RequestParam Map<String, Object> paramMap) {
+
+        log.info("userName={} , age={}", paramMap.get("userName") , paramMap.get("age"));
+        return "ok";
+    }
+
+    @ResponseBody
+    @RequestMapping("/model-attribute-v1")
+    public String modelAttributeV1(@ModelAttribute HelloData helloData) {
+        log.info("helloData={}" , helloData.toString());
+        return "ok";
+    }
+
+    @ResponseBody
+    @RequestMapping("/model-attribute-v2")
+    public String modelAttributeV2(HelloData helloData) {
+        log.info("helloData={}" , helloData.toString());
+        return "ok";
+    }
+
+}
Index: src/main/java/hello/springmvc/basic/requestmapping/MappingClassController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package hello.springmvc.basic.requestmapping;\r\n\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\n@RestController\r\n@RequestMapping(\"/mapping/uses\")\r\npublic class MappingClassController {\r\n\r\n    @GetMapping\r\n    public String user() {\r\n        return \"get users\";\r\n    }\r\n\r\n    @PostMapping\r\n    public String addUser() {\r\n        return \"post user\";\r\n    }\r\n\r\n    @GetMapping(\"/{userId}\")\r\n    public String findUser(@PathVariable String userId) {\r\n        return \"get userId=\" + userId;\r\n    }\r\n\r\n    @PatchMapping(\"/{userId}\")\r\n    public String updateUser(@PathVariable String userId) {\r\n        return \"update userId=\" + userId;\r\n    }\r\n\r\n    @DeleteMapping(\"/{userId}\")\r\n    public String deleteUser(@PathVariable String userId) {\r\n        return \"delete userId=\" + userId;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/hello/springmvc/basic/requestmapping/MappingClassController.java b/src/main/java/hello/springmvc/basic/requestmapping/MappingClassController.java
--- a/src/main/java/hello/springmvc/basic/requestmapping/MappingClassController.java	(revision 12b5c1baa3feb09fe73d8716fb812bcb086c6779)
+++ b/src/main/java/hello/springmvc/basic/requestmapping/MappingClassController.java	(date 1646662137272)
@@ -3,11 +3,11 @@
 import org.springframework.web.bind.annotation.*;
 
 @RestController
-@RequestMapping("/mapping/uses")
+@RequestMapping("/mapping/users")
 public class MappingClassController {
 
     @GetMapping
-    public String user() {
+    public String users() {
         return "get users";
     }
 
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
new file mode 100644
--- /dev/null	(date 1646662137242)
+++ b/.idea/compiler.xml	(date 1646662137242)
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <annotationProcessing>
+      <profile default="true" name="Default" enabled="true" />
+      <profile name="Gradle Imported" enabled="true">
+        <outputRelativeToContentRoot value="true" />
+        <processorPath useClasspath="false">
+          <entry name="$USER_HOME$/.gradle/caches/modules-2/files-2.1/org.projectlombok/lombok/1.18.22/9c08ea24c6eb714e2d6170e8122c069a0ba9aacf/lombok-1.18.22.jar" />
+        </processorPath>
+        <module name="spring-mvc-basic.main" />
+      </profile>
+    </annotationProcessing>
+    <bytecodeTargetLevel target="11" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1646662137237)
+++ b/.idea/.gitignore	(date 1646662137237)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
new file mode 100644
--- /dev/null	(date 1646662137255)
+++ b/.idea/gradle.xml	(date 1646662137255)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
+  <component name="GradleSettings">
+    <option name="linkedExternalProjectsSettings">
+      <GradleProjectSettings>
+        <option name="distributionType" value="DEFAULT_WRAPPED" />
+        <option name="externalProjectPath" value="$PROJECT_DIR$" />
+        <option name="modules">
+          <set>
+            <option value="$PROJECT_DIR$" />
+          </set>
+        </option>
+      </GradleProjectSettings>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: src/main/java/hello/springmvc/basic/request/RequestBodyJsonController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/hello/springmvc/basic/request/RequestBodyJsonController.java b/src/main/java/hello/springmvc/basic/request/RequestBodyJsonController.java
new file mode 100644
--- /dev/null	(date 1646662137246)
+++ b/src/main/java/hello/springmvc/basic/request/RequestBodyJsonController.java	(date 1646662137246)
@@ -0,0 +1,76 @@
+package hello.springmvc.basic.request;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import hello.springmvc.basic.HelloData;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.http.HttpEntity;
+import org.springframework.stereotype.Controller;
+import org.springframework.util.StreamUtils;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.ResponseBody;
+
+import javax.servlet.ServletInputStream;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
+
+@Slf4j
+@Controller
+public class RequestBodyJsonController {
+
+    private ObjectMapper objectMapper = new ObjectMapper();
+
+    @PostMapping("/request-body-json-v1")
+    public void  requestBodyJsonV1(HttpServletRequest request , HttpServletResponse response) throws IOException {
+        ServletInputStream inputStream = request.getInputStream();
+        String messageBody = StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8);
+
+        log.info("messageBody={}" , messageBody);
+        HelloData helloData = objectMapper.readValue(messageBody, HelloData.class);
+
+        log.info("userName={} , age={}", helloData.getUserName() , helloData.getAge());
+
+        response.getWriter().write("OK");
+    }
+
+    @ResponseBody
+    @PostMapping("/request-body-json-v2")
+    public String  requestBodyJsonV2(@RequestBody String messageBody) throws IOException {
+        log.info("messageBody={}" , messageBody);
+        HelloData helloData = objectMapper.readValue(messageBody, HelloData.class);
+
+        log.info("userName={} , age={}", helloData.getUserName() , helloData.getAge());
+
+        return "OK";
+    }
+
+    @ResponseBody
+    @PostMapping("/request-body-json-v3")
+    public String  requestBodyJsonV3(@RequestBody HelloData helloData) {
+        log.info("messageBody={}" , helloData);
+
+        log.info("userName={} , age={}", helloData.getUserName() , helloData.getAge());
+
+        return "OK";
+    }
+
+    @ResponseBody
+    @PostMapping("/request-body-json-v4")
+    public String  requestBodyJsonV4(HttpEntity<HelloData> helloData) {
+        log.info("messageBody={}" , helloData);
+        HelloData bodyData = helloData.getBody();
+        log.info("userName={} , age={}", bodyData.getUserName() , bodyData.getAge());
+
+        return "OK";
+    }
+
+    @ResponseBody
+    @PostMapping("/request-body-json-v5")
+    public HelloData  requestBodyJsonV5(@RequestBody HelloData helloData) {
+        log.info("userName={} , age={}", helloData.getUserName() , helloData.getAge());
+        return helloData;
+    }
+
+}
Index: src/main/java/hello/springmvc/basic/request/RequestHeaderController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/hello/springmvc/basic/request/RequestHeaderController.java b/src/main/java/hello/springmvc/basic/request/RequestHeaderController.java
new file mode 100644
--- /dev/null	(date 1646662143399)
+++ b/src/main/java/hello/springmvc/basic/request/RequestHeaderController.java	(date 1646662143399)
@@ -0,0 +1,44 @@
+package hello.springmvc.basic.request;
+
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.http.HttpMethod;
+import org.springframework.util.MultiValueMap;
+import org.springframework.web.bind.annotation.CookieValue;
+import org.springframework.web.bind.annotation.RequestHeader;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.util.Locale;
+
+@Slf4j
+@RestController
+public class RequestHeaderController {
+
+    @RequestMapping("/headers")
+    public String headers(HttpServletRequest request ,
+                          HttpServletResponse response ,
+                          HttpMethod httpMethod,
+                          Locale locale,
+                          @RequestHeader MultiValueMap<String, String> headerMap,
+                          @RequestHeader("host") String host,
+                          @CookieValue(value = "myCookie", required = false) String cookie) {
+
+        log.info("request={}", request);
+        log.info("response={}", response);
+        log.info("httpMethod={}", httpMethod);
+        log.info("locale={}", locale);
+        log.info("headerMap={}", headerMap);
+        log.info("header host={}", host);
+        log.info("myCookie={}" , cookie);
+
+
+
+
+
+        return "OK";
+    }
+
+
+}
Index: .idea/libraries/gradle_wrapper.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/gradle_wrapper.xml b/.idea/libraries/gradle_wrapper.xml
new file mode 100644
--- /dev/null	(date 1646662143394)
+++ b/.idea/libraries/gradle_wrapper.xml	(date 1646662143394)
@@ -0,0 +1,9 @@
+<component name="libraryTable">
+  <library name="gradle-wrapper">
+    <CLASSES>
+      <root url="jar://$PROJECT_DIR$/gradle/wrapper/gradle-wrapper.jar!/" />
+    </CLASSES>
+    <JAVADOC />
+    <SOURCES />
+  </library>
+</component>
\ No newline at end of file
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><<<<<<< HEAD\r\n# spring-mvc-basic-function\r\n스프링 mvc1편 기본 기능
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	(revision 12b5c1baa3feb09fe73d8716fb812bcb086c6779)
+++ b/README.md	(date 1646662143357)
@@ -1,3 +1,15 @@
 <<<<<<< HEAD
 # spring-mvc-basic-function
-스프링 mvc1편 기본 기능
\ No newline at end of file
+스프링 mvc1편 기본 기능
+
+=======
+# spring mvc 기본 기능
+>>>>>>> e2b5695 (프로젝트 생성)
+
+## HTTP 요청 파라미터 관련 내용 실습
+### 배운점
++ [요청 매핑](https://unique-wandflower-4cc.notion.site/a049acd58d674185b3e1bb291f47f2b9)
++ [회원관리 요청매핑 API](https://unique-wandflower-4cc.notion.site/API-5f088d407b34405ba05850c402738774)
++ [HTTP 요청 - 헤더 조회](https://unique-wandflower-4cc.notion.site/HTTP-5ccda026b62f4e208d70617767d1cb47)
++ [@RequestParam](https://unique-wandflower-4cc.notion.site/HTTP-RequestParam-115b0e3598614d328f527e2270932712)
++ [@ModelAttribute](https://unique-wandflower-4cc.notion.site/HTTP-ModelAttribute-97bf6bb1b60942fe9ef76cda95487b1d)
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1646662143409)
+++ b/.idea/vcs.xml	(date 1646662143409)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: src/main/java/hello/springmvc/basic/HelloData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/hello/springmvc/basic/HelloData.java b/src/main/java/hello/springmvc/basic/HelloData.java
new file mode 100644
--- /dev/null	(date 1646662143404)
+++ b/src/main/java/hello/springmvc/basic/HelloData.java	(date 1646662143404)
@@ -0,0 +1,10 @@
+package hello.springmvc.basic;
+
+import lombok.Data;
+
+@Data
+public class HelloData {
+
+    private String userName;
+    private int age;
+}
